TOKEN = "5815738068:AAH0CLsYyazHP9XgR_1b66pYh02kXMsgxxM"
PAYMENTS_TOKEN = "1744374395:TEST:9bc7a3556eb1e8bed305"

REGISTER_TEXT = "_–î–ª—è –Ω–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è, –≤—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –≤–∞—à –ø–æ–ª –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É._"
ERROR_REGISTER = "_–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª, –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ª—é–¥—å–º–∏.\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞, –≤–≤–æ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /register_"

START = "_–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç.\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /search, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ._"

SEARCH = "üë´ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"
STOP_SEARCH = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"
SEARCH_MALE = "üîé –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É"

CORRECT_MY_LINK = "_–í—ã —É—Å–ø–µ—à–Ω–æ –¥–∞–ª–∏ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç –≤–∞—à–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É ‚úî_"


SEARCH_PROCESS = "_‚åõ –ò–¥—ë—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..._"

STOP_SEARCH_TEXT = "_–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ‚úî_"

SEARCH_TRUE = """_–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω ü¶ä\n\n/next - –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥_\n\n`https://t.me/AnonymChatyBot`"""


STOP_DIALOG_TEXT = "_–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –¥–∏–∞–ª–æ–≥ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º.\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /search_"
SEARCH_DRUGOGO_TEXT = "_–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –¥–∏–∞–ª–æ–≥ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º –∏ –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞._"

STOP_DIALOG_TEXT_SOBESEDNIK = "_–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª —Å –≤–∞–º–∏ –¥–∏–∞–ª–æ–≥.\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /search_"
CANCEl_STOP_DIALOG_TEXT = "_‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∏—Å–∫–µ_"
CANCEl_STOP_SEARCH_TEXT = "_‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ_"
CANCEL_TEXT = "_‚ùå –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ._"
CANCEL_SEARCH_PROCESS = "_‚ùå –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∏—Å–∫–µ._"

BOT_BLOCKED = "_–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –≤–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ ‚ùå_"

CANCEL_TEXT_BOT = "_–ù–∞–ø–∏—à–∏—Ç–µ /search —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_"


MALE = "–ú—É–∂—Å–∫–æ–π"
FEMALE = "–ñ–µ–Ω—Å–∫–∏–π"

MALE_CORRECT_TEXT = "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –º—É–∂—Å–∫–æ–π –ø–æ–ª"
FEMALE_CORRECT_TEXT = "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –∂–µ–Ω—Å–∫–∏–π –ø–æ–ª"

# SEARCH_MALE_MALE = "üë¶ –ü–æ–∏—Å–∫ –º—É–∂—á–∏–Ω"
# SEARCH_MALE_FEMALE = "üë© –ü–æ–∏—Å–∫ –∂–µ–Ω—â–∏–Ω"
BACK = "üëà –ù–∞–∑–∞–¥"

# BUTTON_MALE_TEXT = "_–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –ø–æ–ª —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å._"

BACK_TEXT = "_–í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥._"





# class search_male(StatesGroup):
#     buttons_search = State()

# –û–ø–ª–∞—Ç–∞ –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É

        # elif message.text == cfg.SEARCH_MALE:
        #     current_date = datetime.now()
        #     if db.check_dates(message.from_user.id) is not None:
        #         database_date_obj = datetime.strptime(db.check_dates(message.from_user.id), '%Y-%m-%d %H:%M:%S.%f')
        #         if current_date > database_date_obj:
        #             # —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞
        #             db.del_dates(message.from_user.id)
        #             if cfg.PAYMENTS_TOKEN.split(':') == 'TEST':
        #                 await message.answer("–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂")


        #             await bot.send_invoice(message.chat.id,
        #                                 title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
        #                                 description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –¥–µ–Ω—å!",
        #                                 provider_token=cfg.PAYMENTS_TOKEN,
        #                                 currency='rub',
        #                                 photo_url="https://cdn.xxl.thumbs.canstockphoto.ru/%D0%BE%D0%BF%D0%BB%D0%B0%D1%82%D0%B0-%D0%BA%D0%B0%D1%80%D1%82%D0%B0-%D1%81%D1%82%D0%BE%D0%BA%D0%BE%D0%B2%D0%B0%D1%8F-%D1%84%D0%BE%D1%82%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D1%8F_csp5148789.jpg",
        #                                 photo_width=360,
        #                                 photo_height=254,
        #                                 is_flexible=False,
        #                                 prices=[PRICE],
        #                                 start_parameter='one-day-subscription',
        #                                 payload='test-invoice-payload')
        #         elif current_date < database_date_obj:
        #             # –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫ –º—É–∂—á–∏–Ω—ã –∏–ª–∏ –∂–µ–Ω—â–∏–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞
        #             markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        #             button1 = types.KeyboardButton(cfg.SEARCH_MALE_MALE)
        #             button2 = types.KeyboardButton(cfg.SEARCH_MALE_FEMALE)
        #             button3 = types.KeyboardButton(cfg.BACK)
        #             markup.add(button1, button2, button3)
        #             await message.answer(cfg.BUTTON_MALE_TEXT, reply_markup=markup, parse_mode=types.ParseMode.MARKDOWN)
        #             await search_male.buttons_search.set()
        #     else:
        #         if cfg.PAYMENTS_TOKEN.split(':') == 'TEST':
        #             await message.answer("–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂")


        #         await bot.send_invoice(message.chat.id,
        #                                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
        #                                description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –¥–µ–Ω—å!",
        #                                provider_token=cfg.PAYMENTS_TOKEN,
        #                                currency='rub',
        #                                photo_url="https://cdn.xxl.thumbs.canstockphoto.ru/%D0%BE%D0%BF%D0%BB%D0%B0%D1%82%D0%B0-%D0%BA%D0%B0%D1%80%D1%82%D0%B0-%D1%81%D1%82%D0%BE%D0%BA%D0%BE%D0%B2%D0%B0%D1%8F-%D1%84%D0%BE%D1%82%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D1%8F_csp5148789.jpg",
        #                                photo_width=360,
        #                                photo_height=254,
        #                                is_flexible=False,
        #                                prices=[PRICE],
        #                                start_parameter='one-day-subscription',
        #                                payload='test-invoice-payload')



# @dp.pre_checkout_query_handler(lambda query: True)
# async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
#     await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

# @dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
# async def successful_payment(message: types.Message):
#     print("SUCCESSFUL PAYMENT:")
#     payment_info = message.successful_payment.to_python()
#     for k, v in payment_info.items():
#         print(f"{k} = {v}")

    # {message.successful_payment.total_amount // 100} {message.successful_payment.currency}
    # if db.check_dates(message.from_user.id) is not None:
    #     # current_date = db.check_dates(message.from_user.id)
    #     database_date_obj = datetime.strptime(db.check_dates(message.from_user.id), '%Y-%m-%d %H:%M:%S.%f')
    #     next_day = database_date_obj + timedelta(days=1)
    #     db.update_dates(message.from_user.id, next_day)
    #     await bot.send_message(message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å!")
    # else:
    #     current_date = datetime.now()
    #     next_day = current_date + timedelta(days=1)
    #     db.add_dates(message.from_user.id, next_day)
    #     await bot.send_message(message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å!")

# @dp.message_handler(content_types=['text'], state=search_male.buttons_search)
# async def search_buttons(message: types.Message, state: FSMContext):
#     if message.chat.type == types.ChatType.PRIVATE:
#         if message.text == cfg.BACK:
#             markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
#             button1 = types.KeyboardButton(cfg.SEARCH)
#             button2 = types.KeyboardButton(cfg.SEARCH_MALE)
#             markup.add(button1, button2)
#             await message.answer(cfg.BACK_TEXT, reply_markup=markup, parse_mode=types.ParseMode.MARKDOWN)
#             await state.finish()